// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// HEQ Server (PG version) ‚Äî bootstrap + schema
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const express = require("express");
const cors = require("cors");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const fs = require("fs");
const path = require("path");
const multer = require("multer");
const { Pool } = require("pg");

const app = express();

// ‚úÖ ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶ÿ©
const PORT = process.env.PORT;
const SECRET_KEY = process.env.SECRET_KEY;
const REFRESH_SECRET = process.env.REFRESH_SECRET;
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const ACCESS_EXPIRES_IN = "2h";
const REFRESH_EXPIRES_DAYS = 30;

// ‚úÖ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// helper ÿµÿ∫Ÿäÿ± (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)
function runQuery(q, params = []) {
  return pool.query(q, params);
}

// ‚úÖ ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ±ŸÅÿπ ŸàÿßŸÑÿ≥ÿ™ÿßÿ™ŸäŸÉ
const UPLOADS_DIR = path.join(__dirname, "uploads");
if (!fs.existsSync(UPLOADS_DIR)) fs.mkdirSync(UPLOADS_DIR, { recursive: true });
const upload = multer({ dest: UPLOADS_DIR });

// ‚úÖ ŸÖŸäÿØŸÑŸàŸäÿ±ÿ≤
app.use(cors());
app.use(express.json({ limit: "5mb" }));
app.use("/uploads", express.static(UPLOADS_DIR));

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Auth + Helpers
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function auth(req, res, next) {
  const h = req.headers.authorization || "";
  const token = h.startsWith("Bearer ") ? h.slice(7) : null;
  if (!token) return res.status(401).json({ error: "ŸÖÿ∑ŸÑŸàÿ® ÿ™Ÿàÿ´ŸäŸÇ" });
  jwt.verify(token, SECRET_KEY, (err, payload) => {
    if (err) return res.status(401).json({ error: "ÿ™ŸàŸÉŸÜ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });
    req.user = payload; // { id, email }
    next();
  });
}

async function requireAdmin(req, res, next) {
  const email = req.user && req.user.email;
  if (!email) return res.status(401).json({ error: "ÿ¨ŸÑÿ≥ÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©" });
  try {
    const { rows } = await runQuery(
      "SELECT is_admin FROM users WHERE email = $1 LIMIT 1",
      [email]
    );
    if (!rows.length || rows[0].is_admin !== 1)
      return res.status(403).json({ error: "üö´ ÿßŸÑŸàÿµŸàŸÑ ŸÖÿ±ŸÅŸàÿ∂: ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿ∫Ÿäÿ± ŸÉÿßŸÅŸäÿ©" });
    next();
  } catch (e) {
    return res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
}

function signAccessToken(payload) {
  return jwt.sign(payload, SECRET_KEY, { expiresIn: ACCESS_EXPIRES_IN });
}
function signRefreshToken(payload) {
  return jwt.sign(payload, REFRESH_SECRET, { expiresIn: `${REFRESH_EXPIRES_DAYS}d` });
}
async function storeRefreshToken(userId, refreshToken) {
  const createdAt = Date.now();
  const expiresAt = Date.now() + REFRESH_EXPIRES_DAYS * 24 * 60 * 60 * 1000;
  await runQuery(
    `INSERT INTO refresh_tokens (user_id, token, expires_at, created_at)
     VALUES ($1, $2, $3, $4)`,
    [userId, refreshToken, expiresAt, createdAt]
  );
}

// ÿ•ÿ¥ÿπÿßÿ±
async function notifyUser(toUserId, title, body, type = "system", meta = {}) {
  const createdAt = Date.now();
  try {
    await runQuery(
      `INSERT INTO notifications (to_user_id, title, body, type, meta, is_read, created_at)
       VALUES ($1, $2, $3, $4, $5, 0, $6)`,
      [toUserId ?? null, title, body, type, JSON.stringify(meta), createdAt]
    );
  } catch (e) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿ•ÿØÿÆÿßŸÑ ÿ•ÿ¥ÿπÿßÿ±:", e.message);
  }
}

// ‚úÖ ÿßÿÆÿ™ÿ®ÿßÿ± ÿ®ÿ≥Ÿäÿ∑
app.get("/api/test", (_req, res) => {
  res.json({ ok: true, message: "‚úÖ API + DB (PG) ready", time: new Date().toISOString() });
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ¨ÿØÿßŸàŸÑ (ŸÜŸÅÿ≥ ÿßŸÑÿ£ÿ≥ŸÖÿßÿ°/ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑŸÇÿØŸäŸÖÿ©)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(async () => {
  try {
    await runQuery("SELECT NOW()");
    console.log("üü¢ ÿ™ŸÖ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÄ PostgreSQL");

    // users
    await runQuery(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        name TEXT NOT NULL,
        bio TEXT DEFAULT '',
        avatar TEXT DEFAULT '',
        joined_at BIGINT NOT NULL,
        verified INTEGER DEFAULT 1,
        country TEXT DEFAULT '',
        residence TEXT DEFAULT '',
        age INTEGER,
        gender TEXT DEFAULT '',
        lock_until BIGINT DEFAULT 0,
        failed_attempts INTEGER DEFAULT 0,
        is_admin INTEGER DEFAULT 0,
        disabled INTEGER DEFAULT 0,
        show_email INTEGER DEFAULT 0,
        heq_id TEXT DEFAULT '',
        display_count INTEGER DEFAULT 0,
        flames INTEGER DEFAULT 0,
        faith_rank TEXT DEFAULT '',
        last_faith_activity BIGINT DEFAULT 0,
        rank_tier TEXT DEFAULT ''
      )
    `);

    // posts
    await runQuery(`
      CREATE TABLE IF NOT EXISTS posts (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        text TEXT,
        image TEXT,
        agree INTEGER DEFAULT 0,
        disagree INTEGER DEFAULT 0,
        created_at BIGINT NOT NULL
      )
    `);

    // comments
    await runQuery(`
      CREATE TABLE IF NOT EXISTS comments (
        id SERIAL PRIMARY KEY,
        post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        parent_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
        text TEXT NOT NULL,
        agree INTEGER DEFAULT 0,
        disagree INTEGER DEFAULT 0,
        created_at BIGINT NOT NULL
      )
    `);

    // reactions
    await runQuery(`
      CREATE TABLE IF NOT EXISTS reactions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        target_type TEXT NOT NULL,        -- 'post' | 'comment'
        target_id INTEGER NOT NULL,
        action TEXT NOT NULL,             -- 'agree' | 'disagree'
        UNIQUE (user_id, target_type, target_id)
      )
    `);

    // refresh_tokens
    await runQuery(`
      CREATE TABLE IF NOT EXISTS refresh_tokens (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        token TEXT NOT NULL UNIQUE,
        expires_at BIGINT NOT NULL,
        created_at BIGINT NOT NULL,
        revoked INTEGER DEFAULT 0
      )
    `);
    // ÿ¨ÿØÿßŸàŸÑ ŸÖÿ§ŸÇÿ™ÿ© ŸÑŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ŸàÿßŸÑÿ™ÿ≠ŸÇŸÇ
await runQuery(`
  CREATE TABLE IF NOT EXISTS pending_users (
    id SERIAL PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    name TEXT NOT NULL,
    otp_code TEXT NOT NULL,
    created_at BIGINT NOT NULL
  )
`);

await runQuery(`
  CREATE TABLE IF NOT EXISTS otp_codes (
    id SERIAL PRIMARY KEY,
    email TEXT NOT NULL,
    code TEXT NOT NULL,
    expires_at BIGINT NOT NULL
  )
`);
console.log("üì© ÿ¨ÿØÿßŸàŸÑ pending_users Ÿà otp_codes ÿ¨ÿßŸáÿ≤ÿ©");

    // notifications
    await runQuery(`
      CREATE TABLE IF NOT EXISTS notifications (
        id SERIAL PRIMARY KEY,
        to_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        title TEXT NOT NULL,
        body TEXT NOT NULL,
        type TEXT DEFAULT 'system',
        meta JSONB DEFAULT '{}'::jsonb,
        is_read INTEGER DEFAULT 0,
        created_at BIGINT NOT NULL
      )
    `);

    // system_chat
    await runQuery(`
      CREATE TABLE IF NOT EXISTS system_chat (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        message TEXT NOT NULL,
        from_admin INTEGER DEFAULT 0,
        created_at BIGINT NOT NULL
      )
    `);

    // connections
    await runQuery(`
      CREATE TABLE IF NOT EXISTS connections (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        target_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        status TEXT DEFAULT 'pending', -- pending | connected | rejected
        created_at BIGINT NOT NULL,
        updated_at BIGINT NOT NULL,
        UNIQUE (user_id, target_id)
      )
    `);

    // reports (ŸÜÿ∂ŸäŸÅŸáÿß ŸÑÿ£ŸÜŸáÿß ŸÉÿßŸÜÿ™ ŸÖÿ∞ŸÉŸàÿ±ÿ© ÿ®ÿßŸÑensureColumn)
    await runQuery(`
      CREATE TABLE IF NOT EXISTS reports (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
        post_id INTEGER,
        comment_id INTEGER,
        reason TEXT,
        status TEXT DEFAULT 'open',
        resolution_note TEXT DEFAULT '',
        resolved_at BIGINT DEFAULT 0,
        resolver_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
        created_at BIGINT NOT NULL
      )
    `);

    // ŸÅŸáÿßÿ±ÿ≥
    await runQuery(`CREATE INDEX IF NOT EXISTS idx_posts_created ON posts(created_at)`);
    await runQuery(`CREATE INDEX IF NOT EXISTS idx_comments_post ON comments(post_id)`);
    await runQuery(`CREATE INDEX IF NOT EXISTS idx_react_target ON reactions(target_type, target_id)`);
    await runQuery(`CREATE INDEX IF NOT EXISTS idx_notif_to ON notifications(to_user_id, is_read, created_at)`);
    await runQuery(`CREATE INDEX IF NOT EXISTS idx_chat_user ON system_chat(user_id, created_at)`);

    console.log("‚úÖ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ÿØÿßŸàŸÑ ŸàÿßŸÑŸÅŸáÿßÿ±ÿ≥ ÿ¨ÿßŸáÿ≤ÿ©");

    // üîê seed admin (ŸÖŸÜ ENV ŸÑÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ™ÿ≥ÿ±Ÿäÿ®)
    if (process.env.ADMIN_EMAIL && process.env.ADMIN_PASS) {
      const { rows } = await runQuery(`SELECT id FROM users WHERE is_admin = 1 LIMIT 1`);
      if (!rows.length) {
        const hash = await bcrypt.hash(process.env.ADMIN_PASS, 10);
        await runQuery(
          `INSERT INTO users (email, password, name, is_admin, verified, joined_at)
           VALUES ($1, $2, $3, 1, 1, $4)`,
          [process.env.ADMIN_EMAIL, hash, "ÿßŸÑŸÖÿ∑Ÿàÿ± ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä", Date.now()]
        );
        console.log(`‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ£ÿØŸÖŸÜ (${process.env.ADMIN_EMAIL})`);
      } else {
        console.log("‚ÑπÔ∏è ÿ£ÿØŸÖŸÜ ŸÖŸàÿ¨ŸàÿØ ŸÖÿ≥ÿ®ŸÇÿßŸã ‚Äî ÿ™ÿÆÿ∑Ÿä ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°");
      }
    } else {
      console.log("‚ÑπÔ∏è ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•ÿπÿØÿßÿØ ADMIN_EMAIL/ADMIN_PASS ‚Äî ÿ™ÿÆÿ∑Ÿä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ£ÿØŸÖŸÜ");
    }
  } catch (err) {
    console.error("‚ùå ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÇÿßÿπÿØÿ©/ÿßŸÑÿ¨ÿØÿßŸàŸÑ ŸÅÿ¥ŸÑÿ™:", err.message);
  }
})();

// ====== ÿ™ŸàŸÑŸäÿØ ŸÉŸàÿØ OTP ÿπÿ¥Ÿàÿßÿ¶Ÿä ======
function generateOTP() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// ====== ÿ™ÿ≥ÿ¨ŸäŸÑ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ¨ÿØŸäÿØ ŸÖÿπ ÿ•ÿ±ÿ≥ÿßŸÑ ŸÉŸàÿØ ÿßŸÑÿ™ŸÅÿπŸäŸÑ ======
app.post("/api/signup", async (req, res) => {
  try {
    const { email, password, name } = req.body;
    if (!email || !password || !name)
      return res.status(400).json({ error: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©" });

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email))
      return res.status(400).json({ error: "ÿµŸäÿ∫ÿ© ÿßŸÑÿ®ÿ±ŸäÿØ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©" });

    // ÿ™ÿ≠ŸÇŸÇ ÿ•ŸÜ ŸÉÿßŸÜ ÿßŸÑÿ®ÿ±ŸäÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ≥ÿ®ŸÇÿßŸã
    const existing = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    if (existing.rows.length)
      return res.status(400).json({ error: "Ÿáÿ∞ÿß ÿßŸÑÿ®ÿ±ŸäÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿßŸÑŸÅÿπŸÑ" });

    // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÖÿπŸÑŸÇŸäŸÜ ÿ£Ÿäÿ∂Ÿãÿß
    const pending = await pool.query("SELECT * FROM pending_users WHERE email = $1", [email]);
    if (pending.rows.length)
      return res.status(400).json({ error: "ÿ±ŸÖÿ≤ ÿßŸÑÿ™ŸÅÿπŸäŸÑ ÿ£Ÿèÿ±ÿ≥ŸÑ ŸÖÿ≥ÿ®ŸÇÿßŸãÿå ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ®ÿ±ŸäÿØŸÉ" });

    // ÿ™ÿ¥ŸÅŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑÿ≥ÿ±
    const hashed = await bcrypt.hash(password, 10);
    const otp = generateOTP();
    const createdAt = Date.now();

    // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ§ŸÇÿ™
    await pool.query(
      `INSERT INTO pending_users (email, password, name, otp_code, created_at)
       VALUES ($1, $2, $3, $4, $5)`,
      [email, hashed, name, otp, createdAt]
    );

    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä
    const mailOptions = {
      from: `HEQ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ <${EMAIL_USER}>`,
      to: email,
      subject: "ÿ±ŸÖÿ≤ ÿßŸÑÿ™ŸÅÿπŸäŸÑ ŸÑÿ≠ÿ≥ÿßÿ®ŸÉ ŸÅŸä HEQ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ",
      html: `
        <div style="font-family:Arial;padding:20px;">
          <h2>ÿ±ŸÖÿ≤ ÿ™ŸÅÿπŸäŸÑ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÅŸä HEQ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ</h2>
          <p>ŸÖÿ±ÿ≠ÿ®Ÿãÿß ${name} üëãÿå</p>
          <p>ÿ±ŸÖÿ≤ ÿßŸÑÿ™ŸÅÿπŸäŸÑ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸáŸà:</p>
          <h1 style="color:#007BFF;letter-spacing:3px;">${otp}</h1>
          <p>ŸäŸÜÿ™ŸáŸä ÿßŸÑÿ±ŸÖÿ≤ ÿÆŸÑÿßŸÑ <b>10 ÿØŸÇÿßÿ¶ŸÇ</b>.</p>
        </div>
      `
    };

    await sendEmailBrevo(mailOptions.to, mailOptions.subject, mailOptions.html);

    // ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿ±ŸÖÿ≤ ŸÅŸä ÿ¨ÿØŸàŸÑ otp_codes
    const expiresAt = Date.now() + 10 * 60 * 1000; // 10 ÿØŸÇÿßÿ¶ŸÇ
    await pool.query(
      "INSERT INTO otp_codes (email, code, expires_at) VALUES ($1, $2, $3)",
      [email, otp, expiresAt]
    );

    res.json({
      ok: true,
      message: "üìß ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿßŸÑÿ™ŸÅÿπŸäŸÑ ÿ•ŸÑŸâ ÿ®ÿ±ŸäÿØŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
      email
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿØÿßÿÆŸÑŸä ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ" });
  }
});

// ====== ÿ™ÿ£ŸÉŸäÿØ ÿ±ŸÖÿ≤ ÿßŸÑÿ™ŸÅÿπŸäŸÑ ======
app.post("/api/verify", async (req, res) => {
  try {
    const { email, code } = req.body;
    if (!email || !code)
      return res.status(400).json({ error: "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸàÿßŸÑÿ±ŸÖÿ≤" });

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿßŸÑŸÉŸàÿØ ŸàÿµŸÑÿßÿ≠Ÿäÿ™Ÿá
    const otpRes = await pool.query(
      "SELECT * FROM otp_codes WHERE email = $1 AND code = $2",
      [email, code]
    );
    if (!otpRes.rows.length)
      return res.status(400).json({ error: "ÿ±ŸÖÿ≤ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ ‚ùå" });

    const otpRow = otpRes.rows[0];
    if (Date.now() > otpRow.expires_at)
      return res.status(400).json({ error: "‚è≥ ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑÿ±ŸÖÿ≤" });

    // ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ§ŸÇÿ™
    const pendingRes = await pool.query(
      "SELECT * FROM pending_users WHERE email = $1",
      [email]
    );
    if (!pendingRes.rows.length)
      return res.status(400).json({ error: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ§ŸÇÿ™" });

    const userRow = pendingRes.rows[0];
    const joinedAt = Date.now();

    // ÿ•ÿØÿÆÿßŸÑŸá ÿ∂ŸÖŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑÿ±ÿ≥ŸÖŸäŸäŸÜ
    const insertRes = await pool.query(
      `INSERT INTO users (email, password, name, bio, avatar, joined_at, verified)
       VALUES ($1, $2, $3, '', '', $4, 1) RETURNING id`,
      [userRow.email, userRow.password, userRow.name, joinedAt]
    );
    const userId = insertRes.rows[0].id;

    // üé´ ÿ™ŸàŸÑŸäÿØ HEQ-ID ÿßŸÑŸÖŸÜÿ≥ŸÇ
    const heqId = `HEQ${String(userId).padStart(5, "0")}`;
    await pool.query("UPDATE users SET heq_id = $1 WHERE id = $2", [heqId, userId]);
    console.log(`üÜî ÿ™ŸÖ ÿ™ÿπŸäŸäŸÜ HEQ-ID: ${heqId}`);

    // ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ¨ÿØÿßŸàŸÑ ÿßŸÑŸÖÿ§ŸÇÿ™ÿ©
    await pool.query("DELETE FROM pending_users WHERE email = $1", [email]);
    await pool.query("DELETE FROM otp_codes WHERE email = $1", [email]);

    // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸàŸÉŸÜÿßÿ™
    const payload = { email: userRow.email, id: userId };
    const token = signAccessToken(payload);
    const refreshToken = signRefreshToken(payload);

    await storeRefreshToken(userId, refreshToken);

    console.log(`‚úÖ ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿ≠ÿ≥ÿßÿ®: ${email}`);

    // üß© ÿ≤ŸäÿßÿØÿ© ÿπÿØÿßÿØ ÿßŸÑŸÖŸàÿµŸàŸÑŸäŸÜ ŸÑŸÑŸÖÿ∑Ÿàÿ± ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã
    const DEV_EMAIL = "hajeenheq@gmail.com";
    const devRes = await pool.query("SELECT id FROM users WHERE email = $1", [DEV_EMAIL]);
    if (devRes.rows.length) {
      const devId = devRes.rows[0].id;
      const countRes = await pool.query("SELECT COUNT(*) FROM users");
      const total = parseInt(countRes.rows[0].count);
      if (total > 1) {
        const updated = (total - 1) * 5;
        await pool.query("UPDATE users SET display_count = $1 WHERE id = $2", [updated, devId]);
        console.log(`üî¢ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿπÿØÿßÿØ ÿßŸÑŸÖŸàÿµŸàŸÑŸäŸÜ ŸÑŸÑŸÖÿ∑Ÿàÿ± ÿ•ŸÑŸâ ${updated}`);
      }
    }

    return res.json({
      ok: true,
      message: "‚úÖ ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠! ÿ¨ÿßÿ±Ÿä ÿ™Ÿàÿ¨ŸäŸáŸÉ ŸÑÿ•ŸÉŸÖÿßŸÑ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä.",
      token,
      refreshToken
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£Ÿà ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ®" });
  }
});
// ===== ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ (ŸÖÿπ ÿßŸÑÿ≠ÿ∏ÿ± ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä ÿ®ÿπÿØ 5 ŸÖÿ≠ÿßŸàŸÑÿßÿ™) =====
app.post("/api/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password)
      return res.status(400).json({ error: "ÿ£ÿØÿÆŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ŸàŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±" });

    // ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    const userRes = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    if (!userRes.rows.length)
      return res.status(400).json({ error: "ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const user = userRes.rows[0];

    if (user.disabled)
      return res.status(403).json({
        error: "üö´ ÿ™ŸÖ ÿ™ÿπÿ∑ŸäŸÑ ÿ≠ÿ≥ÿßÿ®ŸÉ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿßŸÑŸÖÿ∑ŸàŸëÿ± ŸÑÿßÿ≥ÿ™ÿπÿßÿØÿ© ÿßŸÑŸàÿµŸàŸÑ."
      });

    // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≠ÿ∏ÿ±
    if (user.lock_until && user.lock_until > Date.now()) {
      const remainingMs = user.lock_until - Date.now();
      const hours = Math.floor(remainingMs / (1000 * 60 * 60));
      const minutes = Math.floor((remainingMs % (1000 * 60 * 60)) / (1000 * 60));
      return res.status(403).json({
        error: `üö´ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≠ÿ∏Ÿàÿ± ŸÖÿ§ŸÇÿ™Ÿãÿß. ÿ£ÿπÿØ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ÿ®ÿπÿØ ${hours} ÿ≥ÿßÿπÿ© Ÿà${minutes} ÿØŸÇŸäŸÇÿ©.`
      });
    }

    // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±
    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      const newFails = (user.failed_attempts || 0) + 1;
      if (newFails >= 5) {
        const lockUntil = Date.now() + 12 * 60 * 60 * 1000; // 12 ÿ≥ÿßÿπÿ©
        await pool.query(
          "UPDATE users SET failed_attempts = $1, lock_until = $2 WHERE email = $3",
          [newFails, lockUntil, email]
        );
        return res.status(403).json({
          error: "üö´ ÿ™ŸÖ ÿ™ÿ¨ÿßŸàÿ≤ ÿßŸÑÿ≠ÿØ ÿßŸÑŸÖÿ≥ŸÖŸàÿ≠ ŸÖŸÜ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿßÿ™. ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≠ÿ∏Ÿàÿ± ŸÑŸÖÿØÿ© 12 ÿ≥ÿßÿπÿ©."
        });
      } else {
        await pool.query(
          "UPDATE users SET failed_attempts = $1 WHERE email = $2",
          [newFails, email]
        );
        return res.status(400).json({
          error: `‚ùå ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©. ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ${newFails} ŸÖŸÜ 5.`
        });
      }
    }

    // ŸÜÿ¨ÿßÿ≠ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
    await pool.query(
      "UPDATE users SET failed_attempts = 0, lock_until = 0 WHERE email = $1",
      [email]
    );

    if (!user.verified)
      return res.status(403).json({ error: "ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ∫Ÿäÿ± ŸÖŸÅÿπŸëŸÑ ÿ®ÿπÿØ" });

    // üé´ ÿ•ŸÜÿ¥ÿßÿ° ÿ™ŸàŸÉŸÜÿßÿ™ ÿ¨ÿØŸäÿØÿ©
    const payload = { id: user.id, email: user.email };
    const token = signAccessToken(payload);
    const refreshToken = signRefreshToken(payload);

    await storeRefreshToken(user.id, refreshToken);

    res.json({
      ok: true,
      message: "‚úÖ ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠",
      token,
      refreshToken
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ" });
  }
});

// ====== ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿ™ŸàŸÉŸÜ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Refresh Token ======
app.post("/api/refresh", async (req, res) => {
  try {
    const { refreshToken } = req.body;
    if (!refreshToken)
      return res.status(400).json({ error: "refreshToken ŸÖŸÅŸÇŸàÿØ" });

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØŸá
    const tokenRes = await pool.query(
      "SELECT * FROM refresh_tokens WHERE token = $1 AND revoked = 0",
      [refreshToken]
    );
    if (!tokenRes.rows.length)
      return res.status(401).json({ error: "ÿ™ŸàŸÉŸÜ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ ÿ£Ÿà ŸÖŸÑÿ∫Ÿâ" });

    const row = tokenRes.rows[0];
    if (Date.now() > row.expires_at)
      return res.status(401).json({ error: "ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑŸÄ Refresh Token" });

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ™ŸàŸÇŸäÿπ
    jwt.verify(refreshToken, REFRESH_SECRET, (err, payload) => {
      if (err)
        return res.status(401).json({ error: "ÿ™ŸàŸÉŸÜ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });

      const newAccessToken = signAccessToken({
        id: payload.id,
        email: payload.email
      });

      res.json({
        ok: true,
        message: "‚úÖ ÿ™ŸÖ ÿ•ÿµÿØÿßÿ± ÿ™ŸàŸÉŸÜ ÿ¨ÿØŸäÿØ ÿ®ŸÜÿ¨ÿßÿ≠",
        token: newAccessToken
      });
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿ™ŸàŸÉŸÜ" });
  }
});

// ====== ŸÜÿ≥ŸäÿßŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± (ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿπŸäŸäŸÜ) ======
app.post("/api/forgot_password", async (req, res) => {
  try {
    const { email } = req.body;
    if (!email)
      return res.status(400).json({ error: "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä" });

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    const userRes = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    if (!userRes.rows.length)
      return res.status(404).json({ error: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑÿ®ÿ±ŸäÿØ" });

    // ÿ≠ÿ∞ŸÅ ÿßŸÑÿ£ŸÉŸàÿßÿØ ÿßŸÑŸÇÿØŸäŸÖÿ©
    await pool.query("DELETE FROM otp_codes WHERE email = $1", [email]);

    // ÿ™ŸàŸÑŸäÿØ ÿ±ŸÖÿ≤ ÿ¨ÿØŸäÿØ
    const otp = generateOTP();
    const expiresAt = Date.now() + 10 * 60 * 1000; // 10 ÿØŸÇÿßÿ¶ŸÇ

    // ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿ±ŸÖÿ≤
    await pool.query(
      "INSERT INTO otp_codes (email, code, expires_at) VALUES ($1, $2, $3)",
      [email, otp, expiresAt]
    );

    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ
    const mailOptions = {
      from: `HEQ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ <${EMAIL_USER}>`,
      to: email,
      subject: "ÿ±ŸÖÿ≤ ÿßÿ≥ÿ™ÿπÿßÿØÿ© ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± - HEQ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ",
      html: `
        <div style="font-family:Arial;padding:20px;">
          <h2>ÿ∑ŸÑÿ® ÿßÿ≥ÿ™ÿπÿßÿØÿ© ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±</h2>
          <p>ŸÖÿ±ÿ≠ÿ®Ÿãÿß üëãÿå ŸÑŸÇÿØ ÿ∑ŸÑÿ®ÿ™ ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÑÿ≠ÿ≥ÿßÿ®ŸÉ.</p>
          <p>ÿ±ŸÖÿ≤ ÿßŸÑÿ™ŸÅÿπŸäŸÑ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸáŸà:</p>
          <h1 style="color:#007BFF;letter-spacing:3px;">${otp}</h1>
          <p>ŸäŸÜÿ™ŸáŸä ÿßŸÑÿ±ŸÖÿ≤ ÿÆŸÑÿßŸÑ <b>10 ÿØŸÇÿßÿ¶ŸÇ</b>.</p>
          <p>ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿ∑ŸÑÿ® Ÿáÿ∞ÿßÿå ŸäŸÖŸÉŸÜŸÉ ÿ™ÿ¨ÿßŸáŸÑ Ÿáÿ∞Ÿá ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©.</p>
        </div>
      `
    };

    await sendEmailBrevo(mailOptions.to, mailOptions.subject, mailOptions.html);
    console.log(`üìß ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿßÿ≥ÿ™ÿπÿßÿØÿ© ŸÑŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ•ŸÑŸâ ${email}: ${otp}`);

    res.json({ ok: true, message: "üì® ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿßŸÑÿßÿ≥ÿ™ÿπÿßÿØÿ© ÿ•ŸÑŸâ ÿ®ÿ±ŸäÿØŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ŸÖÿ≤ ÿßŸÑÿßÿ≥ÿ™ÿπÿßÿØÿ©" });
  }
});
// ====== ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ±ŸÖÿ≤ ÿßÿ≥ÿ™ÿπÿßÿØÿ© ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ======
app.post("/api/verify_reset_code", async (req, res) => {
  try {
    const { email, code } = req.body;
    if (!email || !code)
      return res.status(400).json({ error: "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸàÿßŸÑÿ±ŸÖÿ≤" });

    const { rows } = await pool.query(
      "SELECT * FROM otp_codes WHERE email = $1 AND code = $2",
      [email, code]
    );
    if (!rows.length)
      return res.status(400).json({ error: "ÿ±ŸÖÿ≤ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ ‚ùå" });

    const otp = rows[0];
    if (Date.now() > otp.expires_at)
      return res.status(400).json({ error: "‚è≥ ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑÿ±ŸÖÿ≤ÿå ÿßÿ∑ŸÑÿ® ÿ±ŸÖÿ≤ÿßŸã ÿ¨ÿØŸäÿØÿßŸã" });

    res.json({ ok: true, message: "‚úÖ ÿßŸÑÿ±ŸÖÿ≤ ÿµÿßŸÑÿ≠ÿå ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ¢ŸÜ ÿ™ÿπŸäŸäŸÜ ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿ¨ÿØŸäÿØÿ©." });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ÿØÿßÿÆŸÑŸä ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ±ŸÖÿ≤" });
  }
});

// ====== ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ======
app.post("/api/reset_password", async (req, res) => {
  try {
    const { email, newPassword, confirmPassword } = req.body;

    if (!email || !newPassword || !confirmPassword)
      return res.status(400).json({ error: "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©" });

    if (newPassword !== confirmPassword)
      return res.status(400).json({ error: "‚ùå ŸÉŸÑŸÖÿ™ÿß ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ŸÖÿ™ÿ∑ÿßÿ®ŸÇÿ™ŸäŸÜ" });

    if (newPassword.length < 12)
      return res.status(400).json({ error: "‚ö†Ô∏è ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ 12 ÿ±ŸÖÿ≤ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ." });

    const hasLetters = /[A-Za-z]/.test(newPassword);
    const hasNumbers = /\d/.test(newPassword);
    if (!hasLetters || !hasNumbers)
      return res.status(400).json({ error: "‚ö†Ô∏è ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ÿ≠ÿ±ŸÅ Ÿàÿ£ÿ±ŸÇÿßŸÖ ŸÖÿπÿßŸã." });

    const userRes = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    if (!userRes.rows.length)
      return res.status(404).json({ error: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑÿ®ÿ±ŸäÿØ" });

    const hashed = await bcrypt.hash(newPassword, 10);
    await pool.query("UPDATE users SET password = $1 WHERE email = $2", [hashed, email]);
    await pool.query("DELETE FROM otp_codes WHERE email = $1", [email]);

    console.log(`üîê ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ: ${email}`);
    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠! ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ¢ŸÜ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ." });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿØÿßÿÆŸÑŸä:", err);
    res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿØÿßÿÆŸÑŸä ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ" });
  }
});

// ====== ŸÅÿ≠ÿµ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑŸÖŸàÿ¨ŸàÿØŸäŸÜ ======
app.get("/api/debug/users", async (_req, res) => {
  try {
    const { rows } = await pool.query("SELECT * FROM users");
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ====== ŸÅÿ≠ÿµ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑŸÖÿπŸÑŸÇŸäŸÜ ======
app.get("/api/debug/pending", async (_req, res) => {
  try {
    const { rows } = await pool.query("SELECT * FROM pending_users");
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ====== ÿ™ÿ±ŸÇŸäÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸäÿµÿ®ÿ≠ ŸÖÿ∑ŸàŸëÿ± ======
app.post("/api/make_admin", async (req, res) => {
  try {
    const { email } = req.body;
    if (!email)
      return res.status(400).json({ error: "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä" });

    const result = await pool.query("UPDATE users SET is_admin = 1 WHERE email = $1", [email]);
    if (result.rowCount === 0)
      return res.status(404).json({ error: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑÿ®ÿ±ŸäÿØ" });

    res.json({ ok: true, message: `‚úÖ ÿ™ŸÖÿ™ ÿ™ÿ±ŸÇŸäÿ© ${email} ŸÑŸäÿµÿ®ÿ≠ ŸÖÿ∑Ÿàÿ±ÿßŸã` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

// ====== ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä ======
app.post("/api/profile", auth, async (req, res) => {
  try {
    const email = req.user.email;
    if (!email) return res.status(401).json({ error: "ÿ¨ŸÑÿ≥ÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©" });

    const { name, bio, country, residence, age, gender, avatarBase64, show_email } = req.body;
    const setClauses = [];
    const params = [];

    if (typeof name !== "undefined")       { setClauses.push("name = $"+(params.length+1)); params.push(name); }
    if (typeof bio !== "undefined")        { setClauses.push("bio = $"+(params.length+1)); params.push(bio); }
    if (typeof country !== "undefined")    { setClauses.push("country = $"+(params.length+1)); params.push(country); }
    if (typeof residence !== "undefined")  { setClauses.push("residence = $"+(params.length+1)); params.push(residence); }
    if (typeof age !== "undefined")        { setClauses.push("age = $"+(params.length+1)); params.push(age ?? null); }
    if (typeof gender !== "undefined")     { setClauses.push("gender = $"+(params.length+1)); params.push(gender); }
    if (typeof show_email !== "undefined") { setClauses.push("show_email = $"+(params.length+1)); params.push(show_email ? 1 : 0); }

    if (avatarBase64 && avatarBase64.startsWith("data:image")) {
      const fileName = `avatar_${Date.now()}.png`;
      const avatarPath = `${req.protocol}://${req.get("host")}/uploads/${fileName}`;
      const base64Data = avatarBase64.replace(/^data:image\/\w+;base64,/, "");
      fs.writeFileSync(path.join(UPLOADS_DIR, fileName), base64Data, "base64");
      setClauses.push("avatar = $"+(params.length+1));
      params.push(avatarPath);
    }

    if (setClauses.length === 0)
      return res.json({ ok: true, message: "ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ÿ∫ŸäŸäÿ±ÿßÿ™ ŸÑŸÑÿ™ÿ≠ÿØŸäÿ´." });

    params.push(email);
    const query = `UPDATE users SET ${setClauses.join(", ")} WHERE email = $${params.length}`;
    await pool.query(query, params);

    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

// ====== ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ≠ÿßŸÑŸä ======
app.get("/api/me", auth, async (req, res) => {
  try {
    const email = req.user && req.user.email;
    if (!email) return res.status(401).json({ error: "ÿ¨ŸÑÿ≥ÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©" });

    const { rows } = await pool.query(
      `SELECT id, heq_id, email, name, bio, avatar, country, residence, age, gender,
              joined_at, show_email, faith_rank, flames, rank_tier
       FROM users WHERE email = $1`,
      [email]
    );

    if (!rows.length)
      return res.status(404).json({ error: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const row = rows[0];
    const profileCompleted = Boolean(
      (row.bio && row.bio.trim().length > 0) ||
      (row.avatar && row.avatar.trim().length > 0) ||
      (row.country && row.country.trim().length > 0) ||
      (row.residence && row.residence.trim().length > 0)
    );

    const safeEmail = row.show_email ? row.email : "";

    return res.json({
      ok: true,
      user: {
        id: row.id,
        heq_id: row.heq_id,
        email: safeEmail,
        name: row.name,
        bio: row.bio,
        avatar: row.avatar,
        country: row.country,
        residence: row.residence,
        age: row.age,
        gender: row.gender,
        joined_at: row.joined_at,
        show_email: row.show_email,
        faith_rank: row.faith_rank,
        flames: row.flames,
        rank_tier: row.rank_tier
      },
      profileCompleted
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ" });
  }
});
// ====== ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™ (ÿπÿßŸÖ) ======
app.get("/api/posts", async (_req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT 
        p.id, p.user_id, p.text, p.image, p.agree, p.disagree, p.created_at,
        u.name AS author_name,
        u.avatar AS author_avatar,
        u.faith_rank AS author_rank,
        u.rank_tier AS author_tier,
        u.flames AS author_flames
      FROM posts p
      JOIN users u ON u.id = p.user_id
      ORDER BY p.created_at DESC
    `);
    res.json({ ok: true, posts: rows });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™:", err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™" });
  }
});

// ====== ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÜÿ¥Ÿàÿ± ÿ¨ÿØŸäÿØ ======
app.post("/api/posts", auth, upload.single("image"), async (req, res) => {
  try {
    const { text } = req.body;
    const userId = req.user.id;

    // üß† ŸÅÿ≠ÿµ ÿßŸÑÿ≠ÿ∏ÿ± ÿ£Ÿà ÿßŸÑÿ™ÿπÿ∑ŸäŸÑ
    const userRes = await pool.query("SELECT disabled, lock_until FROM users WHERE id = $1", [userId]);
    const user = userRes.rows[0];
    if (!user)
      return res.status(404).json({ error: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    if (user.disabled)
      return res.status(403).json({ error: "üö´ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÖÿπÿ∑ŸëŸÑ. ŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿßŸÑŸÜÿ¥ÿ± ÿ£Ÿà ÿßŸÑÿ™ŸÅÿßÿπŸÑ." });

    if (user.lock_until && user.lock_until > Date.now()) {
      const diffH = Math.ceil((user.lock_until - Date.now()) / (1000 * 60 * 60));
      return res.status(403).json({ error: `‚è≥ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÖÿ≠ÿ∏Ÿàÿ± ŸÖÿ§ŸÇÿ™Ÿãÿß (${diffH} ÿ≥ÿßÿπÿ© ŸÖÿ™ÿ®ŸÇŸäÿ©).` });
    }

    if (!text && !req.file)
      return res.status(400).json({ error: "Ÿäÿ±ÿ¨Ÿâ ŸÉÿ™ÿßÿ®ÿ© ŸÜÿµ ÿ£Ÿà ÿ±ŸÅÿπ ÿµŸàÿ±ÿ©" });

    let imagePath = null;
    if (req.file)
      imagePath = `${req.protocol}://${req.get("host")}/uploads/${req.file.filename}`;

    const createdAt = Date.now();
    const result = await pool.query(
      `INSERT INTO posts (user_id, text, image, created_at)
       VALUES ($1, $2, $3, $4) RETURNING id`,
      [userId, text || "", imagePath, createdAt]
    );

    res.json({
      ok: true,
      id: result.rows[0].id,
      message: "‚úÖ ÿ™ŸÖ ŸÜÿ¥ÿ± ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠",
      image: imagePath
    });
  } catch (err) {
    console.error("‚ùå ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±" });
  }
});

// ====== ÿ•ŸÜÿ¥ÿßÿ° ÿ™ÿπŸÑŸäŸÇ ÿ¨ÿØŸäÿØ ======
app.post("/api/comments", auth, async (req, res) => {
  try {
    const { post_id, parent_id, text } = req.body;
    const userId = req.user.id;

    if (!text || !post_id)
      return res.status(400).json({ error: "ÿßŸÑŸÜÿµ ŸàÿßŸÑŸÖÿπÿ±ŸÅ ŸÖÿ∑ŸÑŸàÿ®ÿßŸÜ" });

    const userRes = await pool.query("SELECT disabled, lock_until FROM users WHERE id = $1", [userId]);
    const user = userRes.rows[0];
    if (!user)
      return res.status(404).json({ error: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    if (user.disabled)
      return res.status(403).json({ error: "üö´ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÖÿπÿ∑ŸëŸÑ. ŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ™ÿπŸÑŸäŸÇ." });

    if (user.lock_until && user.lock_until > Date.now()) {
      const diffH = Math.ceil((user.lock_until - Date.now()) / (1000 * 60 * 60));
      return res.status(403).json({ error: `‚è≥ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÖÿ≠ÿ∏Ÿàÿ± ŸÖÿ§ŸÇÿ™Ÿãÿß (${diffH} ÿ≥ÿßÿπÿ© ŸÖÿ™ÿ®ŸÇŸäÿ©).` });
    }

    const createdAt = Date.now();
    const insertRes = await pool.query(
      `INSERT INTO comments (post_id, user_id, parent_id, text, created_at)
       VALUES ($1, $2, $3, $4, $5)
       RETURNING id`,
      [post_id, userId, parent_id || null, text, createdAt]
    );

    const commentId = insertRes.rows[0].id;

    // üì¢ ÿ•ÿ¥ÿπÿßÿ± ŸÑÿµÿßÿ≠ÿ® ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿ£Ÿà ÿßŸÑÿ™ÿπŸÑŸäŸÇ
    if (!parent_id) {
      // ÿ™ÿπŸÑŸäŸÇ ÿ¨ÿØŸäÿØ ÿπŸÑŸâ ŸÖŸÜÿ¥Ÿàÿ±
      const postOwner = await pool.query(`SELECT user_id FROM posts WHERE id = $1`, [post_id]);
      if (postOwner.rows.length && postOwner.rows[0].user_id !== userId) {
        await notifyUser(
          postOwner.rows[0].user_id,
          "üí¨ ÿ™ÿπŸÑŸäŸÇ ÿ¨ÿØŸäÿØ ÿπŸÑŸâ ŸÖŸÜÿ¥Ÿàÿ±ŸÉ",
          "ŸÇÿßŸÖ ÿ£ÿ≠ÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿπŸÑŸâ ŸÖŸÜÿ¥Ÿàÿ±ŸÉ.",
          "comment",
          { post_id, comment_id: commentId, sender_id: userId }
        );
      }
    } else {
      // ÿ±ÿØ ÿπŸÑŸâ ÿ™ÿπŸÑŸäŸÇ
      const parentOwner = await pool.query(`SELECT user_id FROM comments WHERE id = $1`, [parent_id]);
      if (parentOwner.rows.length && parentOwner.rows[0].user_id !== userId) {
        await notifyUser(
          parentOwner.rows[0].user_id,
          "‚Ü©Ô∏è ÿ±ÿØ ÿπŸÑŸâ ÿ™ÿπŸÑŸäŸÇŸÉ",
          "ŸÇÿßŸÖ ÿ£ÿ≠ÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿßŸÑÿ±ÿØ ÿπŸÑŸâ ÿ™ÿπŸÑŸäŸÇŸÉ.",
          "reply",
          { post_id, parent_id, comment_id: commentId, sender_id: userId }
        );
      }
    }

    // üß© ÿ¨ŸÑÿ® ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ±ÿ≥ŸÑ ŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿπŸÖŸäŸÑ
    const nameRes = await pool.query("SELECT name FROM users WHERE id = $1", [userId]);
    const fromUser = nameRes.rows.length ? nameRes.rows[0].name : "ŸÖÿ≥ÿ™ÿÆÿØŸÖ";

    res.json({
      ok: true,
      id: commentId,
      message: "‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿ®ŸÜÿ¨ÿßÿ≠",
      author_name: fromUser
    });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ™ÿπŸÑŸäŸÇ:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ÿπŸÑŸäŸÇ" });
  }
});

// ====== ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸÑŸÖŸÜÿ¥Ÿàÿ± ŸÖÿπŸäŸÜ ======
app.get("/api/comments/:postId", async (req, res) => {
  try {
    const postId = req.params.postId;
    const { rows } = await pool.query(`
      SELECT 
        c.*, 
        u.name AS author_name, 
        u.avatar AS author_avatar,
        u.faith_rank AS author_rank,
        u.rank_tier AS author_tier,
        u.flames AS author_flames
      FROM comments c
      JOIN users u ON u.id = c.user_id
      WHERE c.post_id = $1
      ORDER BY c.created_at ASC
    `, [postId]);

    res.json({ ok: true, comments: rows });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™" });
  }
});
// ====== ŸÜÿ∏ÿßŸÖ ÿ™ŸÅÿßÿπŸÑ ŸÖÿ™ÿ∑Ÿàÿ± (ÿ™ÿµŸàŸäÿ™ ŸÖÿ±ÿ© Ÿàÿßÿ≠ÿØÿ©) ======
app.post("/api/react", auth, async (req, res) => {
  try {
    const { type, targetId, action } = req.body; // type = post | comment
    const userId = req.user.id;

    if (!type || !targetId || !["agree", "disagree"].includes(action)) {
      return res.status(400).json({ error: "ÿ∑ŸÑÿ® ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });
    }

    // üß† ŸÅÿ≠ÿµ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÇÿ®ŸÑ ÿßŸÑÿ™ŸÅÿßÿπŸÑ
    const userRes = await pool.query("SELECT disabled, lock_until FROM users WHERE id = $1", [userId]);
    const user = userRes.rows[0];
    if (!user)
      return res.status(404).json({ error: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    if (user.disabled)
      return res.status(403).json({ error: "üö´ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÖÿπÿ∑ŸëŸÑ. ŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ™ŸÅÿßÿπŸÑ." });

    if (user.lock_until && user.lock_until > Date.now()) {
      const diffH = Math.ceil((user.lock_until - Date.now()) / (1000 * 60 * 60));
      return res.status(403).json({ error: `‚è≥ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÖÿ≠ÿ∏Ÿàÿ± ŸÖÿ§ŸÇÿ™Ÿãÿß (${diffH} ÿ≥ÿßÿπÿ© ŸÖÿ™ÿ®ŸÇŸäÿ©).` });
    }

    // üü¢ ÿ•ÿ∞ÿß ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ≥ŸÑŸäŸÖ ŸÜŸÉŸÖŸÑ
    const table = type === "post" ? "posts" : type === "comment" ? "comments" : null;
    if (!table)
      return res.status(400).json({ error: "ŸÜŸàÿπ ÿßŸÑŸáÿØŸÅ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ" });

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ŸÜ ŸÉÿßŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÇÿØ ÿ™ŸÅÿßÿπŸÑ ŸÖÿ≥ÿ®ŸÇŸãÿß
    const reactRes = await pool.query(
      "SELECT * FROM reactions WHERE user_id = $1 AND target_type = $2 AND target_id = $3",
      [userId, type, targetId]
    );

    // üîπ ÿßŸÑÿ≠ÿßŸÑÿ© 1: ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸÖ ŸäÿµŸàÿ™ ŸÖŸÜ ŸÇÿ®ŸÑ
    if (reactRes.rows.length === 0) {
      await pool.query(
        "INSERT INTO reactions (user_id, target_type, target_id, action) VALUES ($1, $2, $3, $4)",
        [userId, type, targetId, action]
      );
      await pool.query(
        `UPDATE ${table} SET ${action} = ${action} + 1 WHERE id = $1`,
        [targetId]
      );
      return await sendCounts();
    }

    const row = reactRes.rows[0];

    // üîπ ÿßŸÑÿ≠ÿßŸÑÿ© 2: ÿ∂ÿ∫ÿ∑ ŸÜŸÅÿ≥ ÿßŸÑÿ≤ÿ± ŸÖÿ±ÿ© ÿ´ÿßŸÜŸäÿ© ‚Üí ÿ≠ÿ∞ŸÅ ÿßŸÑÿ™ÿµŸàŸäÿ™
    if (row.action === action) {
      await pool.query("DELETE FROM reactions WHERE id = $1", [row.id]);
      await pool.query(
        `UPDATE ${table} SET ${action} = CASE WHEN ${action} > 0 THEN ${action} - 1 ELSE 0 END WHERE id = $1`,
        [targetId]
      );
      return await sendCounts();
    }

    // üîπ ÿßŸÑÿ≠ÿßŸÑÿ© 3: ÿ∫ŸäŸëÿ± ÿ±ÿ£ŸäŸá
    await pool.query("UPDATE reactions SET action = $1 WHERE id = $2", [action, row.id]);
    const opposite = action === "agree" ? "disagree" : "agree";
    await pool.query(
      `UPDATE ${table} 
       SET ${action} = ${action} + 1, 
           ${opposite} = CASE WHEN ${opposite} > 0 THEN ${opposite} - 1 ELSE 0 END 
       WHERE id = $1`,
      [targetId]
    );
    return await sendCounts();

    // ÿØÿßŸÑÿ© ŸÑÿ¨ŸÑÿ® ÿßŸÑŸÇŸäŸÖ ÿßŸÑÿ¨ÿØŸäÿØÿ© ÿ®ÿπÿØ ÿ£Ÿä ÿ™ÿπÿØŸäŸÑ
    async function sendCounts() {
      try {
        const updatedRes = await pool.query(
          `SELECT agree, disagree FROM ${table} WHERE id = $1`,
          [targetId]
        );
        const updated = updatedRes.rows[0] || { agree: 0, disagree: 0 };

        const targetTable = type === "post" ? "posts" : "comments";
        const ownerRes = await pool.query(`SELECT user_id FROM ${targetTable} WHERE id = $1`, [targetId]);
        const ownerRow = ownerRes.rows[0];
        const nameRes = await pool.query("SELECT name FROM users WHERE id = $1", [userId]);
        const userRow = nameRes.rows[0];
        const fromUser = userRow ? userRow.name : "ŸÖÿ≥ÿ™ÿÆÿØŸÖ";
        const targetUserId = ownerRow ? ownerRow.user_id : null;

        res.json({
          ok: true,
          agree: updated.agree,
          disagree: updated.disagree,
          from_user: fromUser,
          target_user_id: targetUserId
        });

        // üîî ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÅŸÇÿ∑ ÿ•ÿ∞ÿß ŸÉÿßŸÜ "ÿ•ÿπÿ¨ÿßÿ®"
        if (action === "agree" && ownerRow && ownerRow.user_id !== userId) {
          const notifTitle = type === "post"
            ? "üëç ÿ™ŸÅÿßÿπŸÑ ŸÖÿπ ŸÖŸÜÿ¥Ÿàÿ±ŸÉ"
            : "üëç ÿ™ŸÅÿßÿπŸÑ ŸÖÿπ ÿ™ÿπŸÑŸäŸÇŸÉ";
          const notifBody = type === "post"
            ? "ŸÇÿßŸÖ ÿ£ÿ≠ÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿßŸÑÿ•ÿπÿ¨ÿßÿ® ÿ®ŸÖŸÜÿ¥Ÿàÿ±ŸÉ."
            : "ŸÇÿßŸÖ ÿ£ÿ≠ÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿßŸÑÿ•ÿπÿ¨ÿßÿ® ÿ®ÿ™ÿπŸÑŸäŸÇŸÉ.";

          await notifyUser(
            ownerRow.user_id,
            notifTitle,
            notifBody,
            "reaction",
            { target_type: type, target_id: targetId, sender_id: userId }
          );
        }
      } catch (e) {
        console.error("‚ùå sendCounts error:", e.message);
        res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ©" });
      }
    }
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÅÿßÿπŸÑ:", err);
    res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑŸÖÿπÿßŸÑÿ¨ÿ©" });
  }
});
// ====== ÿ™ÿπÿØŸäŸÑ ŸÖŸÜÿ¥Ÿàÿ± ======
app.put("/api/posts/:id", auth, upload.single("image"), async (req, res) => {
  try {
    const postId = req.params.id;
    const userId = req.user.id;
    const { text } = req.body;

    const postRes = await pool.query("SELECT * FROM posts WHERE id = $1", [postId]);
    if (!postRes.rows.length)
      return res.status(404).json({ error: "ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const post = postRes.rows[0];
    if (post.user_id !== userId)
      return res.status(403).json({ error: "‚ùå ŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿ™ÿπÿØŸäŸÑ ŸÖŸÜÿ¥Ÿàÿ± ÿ∫Ÿäÿ±ŸÉ" });

    let imagePath = post.image;
    if (req.file)
      imagePath = `${req.protocol}://${req.get("host")}/uploads/${req.file.filename}`;

    await pool.query(
      "UPDATE posts SET text = $1, image = $2 WHERE id = $3",
      [text || post.text, imagePath, postId]
    );

    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠", image: imagePath });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±" });
  }
});

// ====== ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ¥Ÿàÿ± ======
app.delete("/api/posts/:id", auth, async (req, res) => {
  try {
    const postId = req.params.id;
    const userId = req.user.id;

    const postRes = await pool.query("SELECT * FROM posts WHERE id = $1", [postId]);
    if (!postRes.rows.length)
      return res.status(404).json({ error: "ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const post = postRes.rows[0];
    if (post.user_id !== userId)
      return res.status(403).json({ error: "‚ùå ŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ¥Ÿàÿ± ÿ∫Ÿäÿ±ŸÉ" });

    await pool.query("DELETE FROM posts WHERE id = $1", [postId]);

    res.json({ ok: true, message: "üóëÔ∏è ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±" });
  }
});

// ====== ÿ•ÿ±ÿ≥ÿßŸÑ ÿ®ŸÑÿßÿ∫ ======
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS reports (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
        reason TEXT NOT NULL,
        created_at BIGINT NOT NULL
      )
    `);
    console.log("üìã ÿ¨ÿØŸàŸÑ reports ÿ¨ÿßŸáÿ≤");
  } catch (e) {
    console.error("‚ö†Ô∏è ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ reports:", e.message);
  }
})();

app.post("/api/report", auth, async (req, res) => {
  try {
    const { post_id, reason } = req.body;
    const userId = req.user.id;

    if (!post_id || !reason)
      return res.status(400).json({ error: "Ÿäÿ¨ÿ® ÿ•ÿØÿÆÿßŸÑ ÿ≥ÿ®ÿ® ÿßŸÑÿ•ÿ®ŸÑÿßÿ∫ ŸàŸÖÿπÿ±ŸÅ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±" });

    const createdAt = Date.now();
    await pool.query(
      "INSERT INTO reports (user_id, post_id, reason, created_at) VALUES ($1, $2, $3, $4)",
      [userId, post_id, reason, createdAt]
    );

    res.json({ ok: true, message: "üö© ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ŸÑÿßÿ∫ ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ŸÑÿßÿ∫:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ŸÑÿßÿ∫" });
  }
});

// ====== ÿ≠ŸÅÿ∏ ŸÖŸÜÿ¥Ÿàÿ± ======
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS saved_posts (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
        saved_at BIGINT NOT NULL,
        UNIQUE(user_id, post_id)
      )
    `);
    console.log("üíæ ÿ¨ÿØŸàŸÑ saved_posts ÿ¨ÿßŸáÿ≤");
  } catch (e) {
    console.error("‚ö†Ô∏è ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ saved_posts:", e.message);
  }
})();

app.post("/api/saved", auth, async (req, res) => {
  try {
    const { post_id } = req.body;
    const userId = req.user.id;

    if (!post_id)
      return res.status(400).json({ error: "ÿ±ŸÇŸÖ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ŸÖÿ∑ŸÑŸàÿ®" });

    const savedAt = Date.now();
    await pool.query(
      `INSERT INTO saved_posts (user_id, post_id, saved_at)
       VALUES ($1, $2, $3)
       ON CONFLICT (user_id, post_id) DO NOTHING`,
      [userId, post_id, savedAt]
    );

    res.json({ ok: true, message: "üíæ ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ŸÅŸä ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©!" });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±" });
  }
});
// ====== ŸÅÿ≠ÿµ ÿµŸÑÿßÿ≠Ÿäÿ© ÿßŸÑŸÖÿ∑Ÿàÿ± ======
app.get("/api/check_admin", auth, async (req, res) => {
  try {
    const email = req.user.email;
    const { rows } = await pool.query("SELECT is_admin FROM users WHERE email = $1", [email]);
    if (!rows.length || rows[0].is_admin !== 1)
      return res.status(403).json({ ok: false, message: "ŸÑŸäÿ≥ ŸÖÿ∑Ÿàÿ±ÿßŸã" });

    res.json({ ok: true, message: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ∑Ÿàÿ± ŸÖÿπÿ™ŸÖÿØ ‚úÖ" });
  } catch (err) {
    console.error("‚ùå check_admin:", err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

// ====== ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ======
app.get("/api/admin/users", auth, requireAdmin, async (req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT id, email, name, is_admin, verified, disabled, failed_attempts, lock_until, joined_at
      FROM users
      ORDER BY joined_at DESC
    `);
    res.json({ ok: true, users: rows });
  } catch (err) {
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

// ÿ≠ÿ∏ÿ± ŸÖÿ§ŸÇÿ™
app.post("/api/admin/users/:id/ban", auth, requireAdmin, async (req, res) => {
  try {
    const uid = +req.params.id;
    const hours = Math.max(1, +req.body.hours || 12);
    const reason = (req.body.reason || "ŸÖÿÆÿßŸÑŸÅÿ© ÿßŸÑŸÇŸàÿßÿπÿØ").trim();
    const lockUntil = Date.now() + hours * 3600 * 1000;

    const result = await pool.query("UPDATE users SET lock_until = $1 WHERE id = $2", [lockUntil, uid]);
    if (result.rowCount === 0)
      return res.status(404).json({ error: "ŸÅÿ¥ŸÑ ÿßŸÑÿ≠ÿ∏ÿ± ÿ£Ÿà ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    await notifyUser(uid, "ÿ™ŸÖ ÿ≠ÿ∏ÿ±ŸÉ ŸÖÿ§ŸÇÿ™Ÿãÿß", `ÿ™ŸÖ ÿ≠ÿ∏ÿ± ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÑŸÖÿØÿ© ${hours} ÿ≥ÿßÿπÿ©.\nÿßŸÑÿ≥ÿ®ÿ®: ${reason}`, "moderation");
    res.json({ ok: true, message: "ÿ™ŸÖ ÿßŸÑÿ≠ÿ∏ÿ± ÿßŸÑŸÖÿ§ŸÇÿ™ Ÿàÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ±" });
  } catch (err) {
    console.error("‚ùå ban:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿßŸÑÿ≠ÿ∏ÿ±" });
  }
});

// ÿ±ŸÅÿπ ÿßŸÑÿ≠ÿ∏ÿ±
app.post("/api/admin/users/:id/unban", auth, requireAdmin, async (req, res) => {
  try {
    const uid = +req.params.id;
    const result = await pool.query("UPDATE users SET lock_until = 0, failed_attempts = 0 WHERE id = $1", [uid]);
    if (result.rowCount === 0)
      return res.status(404).json({ error: "ŸÅÿ¥ŸÑ ÿ±ŸÅÿπ ÿßŸÑÿ≠ÿ∏ÿ± ÿ£Ÿà ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    await notifyUser(uid, "ÿ™ŸÖ ÿ±ŸÅÿπ ÿßŸÑÿ≠ÿ∏ÿ±", "ÿ£ÿµÿ®ÿ≠ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÅÿπŸëÿßŸÑŸãÿß ŸÖŸÜ ÿ¨ÿØŸäÿØ.", "moderation");
    res.json({ ok: true });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ±ŸÅÿπ ÿßŸÑÿ≠ÿ∏ÿ±" });
  }
});

// ÿ™ÿπÿ∑ŸäŸÑ ÿ≠ÿ≥ÿßÿ® ŸÜŸáÿßÿ¶Ÿä
app.post("/api/admin/users/:id/disable", auth, requireAdmin, async (req, res) => {
  try {
    const uid = +req.params.id;
    const reason = (req.body.reason || "ŸÖÿÆÿßŸÑŸÅÿ© ÿßŸÑŸÇŸàÿßÿπÿØ").trim();
    const result = await pool.query("UPDATE users SET disabled = 1 WHERE id = $1", [uid]);
    if (result.rowCount === 0)
      return res.status(404).json({ error: "ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿπÿ∑ŸäŸÑ ÿ£Ÿà ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    await notifyUser(uid, "ÿ™ŸÖ ÿ™ÿπÿ∑ŸäŸÑ ÿ≠ÿ≥ÿßÿ®ŸÉ", `ÿßŸÑÿ≥ÿ®ÿ®: ${reason}`, "moderation");
    res.json({ ok: true });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿπÿ∑ŸäŸÑ" });
  }
});

// ‚úÖ ÿ™ŸÖŸÉŸäŸÜ ÿ≠ÿ≥ÿßÿ® (ŸÅŸÉ ÿßŸÑÿ™ÿπÿ∑ŸäŸÑ)
app.post("/api/admin/users/:id/enable", auth, requireAdmin, async (req, res) => {
  try {
    const uid = +req.params.id;
    const result = await pool.query("UPDATE users SET disabled = 0 WHERE id = $1", [uid]);
    if (result.rowCount === 0)
      return res.status(404).json({ error: "ŸÅÿ¥ŸÑ ÿ™ŸÖŸÉŸäŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ£Ÿà ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    await notifyUser(uid, "‚úÖ ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÖŸÜ ÿ¨ÿØŸäÿØ", "ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ¢ŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ ÿ®ÿ≠ÿ±Ÿäÿ©.", "moderation");
    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ™ŸÖŸÉŸäŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ™ŸÖŸÉŸäŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ®" });
  }
});

// ÿ™ÿ±ŸÇŸäÿ© ÿ•ŸÑŸâ ŸÖÿ∑Ÿàÿ±
app.post("/api/admin/users/:id/promote", auth, requireAdmin, async (req, res) => {
  try {
    const uid = +req.params.id;
    const result = await pool.query("UPDATE users SET is_admin = 1 WHERE id = $1", [uid]);
    if (result.rowCount === 0)
      return res.status(404).json({ error: "ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿ±ŸÇŸäÿ© ÿ£Ÿà ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    await notifyUser(uid, "ÿ™ÿ±ŸÇŸäÿ© ÿ≠ÿ≥ÿßÿ®ŸÉ", "üéâ ÿ™ŸÖÿ™ ÿ™ÿ±ŸÇŸäÿ™ŸÉ ÿ•ŸÑŸâ ŸÖÿ∑ŸàŸëÿ± ÿßŸÑŸÜÿ∏ÿßŸÖ", "system");
    res.json({ ok: true });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿ±ŸÇŸäÿ©" });
  }
});

// ====== ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™ ======
app.get("/api/admin/posts", auth, requireAdmin, async (req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT p.id, p.user_id, u.name AS author_name, p.text, p.image, p.agree, p.disagree, p.created_at
      FROM posts p JOIN users u ON u.id = p.user_id
      ORDER BY p.created_at DESC
    `);
    res.json({ ok: true, posts: rows });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™" });
  }
});

app.post("/api/admin/posts/:id/delete", auth, requireAdmin, async (req, res) => {
  try {
    const pid = +req.params.id;
    const reason = (req.body.reason || "ŸÖÿÆÿßŸÑŸÅÿ© ÿßŸÑŸÇŸàÿßÿπÿØ").trim();

    const { rows } = await pool.query("SELECT user_id FROM posts WHERE id = $1", [pid]);
    if (!rows.length)
      return res.status(404).json({ error: "ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const owner = rows[0].user_id;
    await pool.query("DELETE FROM posts WHERE id = $1", [pid]);

    await notifyUser(owner, "ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ¥Ÿàÿ±ŸÉ", `ÿßŸÑÿ≥ÿ®ÿ®: ${reason}`, "moderation", { post_id: pid });
    res.json({ ok: true, message: "ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± Ÿàÿ•ÿ¥ÿπÿßÿ± ÿµÿßÿ≠ÿ®Ÿá" });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±" });
  }
});

// ====== ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ®ŸÑÿßÿ∫ÿßÿ™ ======
app.get("/api/admin/reports", auth, requireAdmin, async (req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT r.*, u.name AS reporter_name, p.text AS post_text
      FROM reports r
      JOIN users u ON u.id = r.user_id
      JOIN posts p ON p.id = r.post_id
      ORDER BY r.created_at DESC
    `);
    res.json({ ok: true, reports: rows });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸÑÿßÿ∫ÿßÿ™" });
  }
});

app.post("/api/admin/reports/:id/resolve", auth, requireAdmin, async (req, res) => {
  try {
    const rid = +req.params.id;
    const action = (req.body.action || "ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ŸÇŸÇ").trim();
    const note = (req.body.note || "").trim();
    const resolverId = req.user.id;

    const { rows } = await pool.query("SELECT user_id FROM reports WHERE id = $1", [rid]);
    if (!rows.length)
      return res.status(404).json({ error: "ÿßŸÑÿ®ŸÑÿßÿ∫ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const reporterId = rows[0].user_id;
    await pool.query(
      `UPDATE reports 
       SET status = 'resolved', resolution_note = $1, resolved_at = $2, resolver_id = $3 
       WHERE id = $4`,
      [note || action, Date.now(), resolverId, rid]
    );

    await notifyUser(reporterId, "ÿ™ŸÖÿ™ ŸÖÿπÿßŸÑÿ¨ÿ© ÿ®ŸÑÿßÿ∫ŸÉ", `ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©: ${action}\n${note}`, "moderation");
    res.json({ ok: true, message: "ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ° ÿßŸÑÿ®ŸÑÿßÿ∫ Ÿàÿ•ÿ¥ÿπÿßÿ± ÿßŸÑŸÖÿ®ŸÑŸëÿ∫" });
  } catch (err) {
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ŸÑÿßÿ∫" });
  }
});
// ====== ÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ± ÿπÿßŸÖ ÿ£Ÿà ŸÖŸàÿ¨Ÿá ======
app.post("/api/admin/notify", auth, requireAdmin, async (req, res) => {
  try {
    const { to_user_id = null, title, body, type = "broadcast", meta = {} } = req.body || {};
    if (!title || !body) return res.status(400).json({ error: "ÿßŸÑÿπŸÜŸàÿßŸÜ ŸàÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÖÿ∑ŸÑŸàÿ®ÿßŸÜ" });
    await notifyUser(to_user_id ? +to_user_id : null, title, body, type, meta);
    res.json({ ok: true, message: "ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("admin/notify:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±" });
  }
});

// ====== ÿ¨ŸÑÿ® ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ======
app.get("/api/notifications", auth, async (req, res) => {
  try {
    const uid = req.user.id;
    const { rows } = await pool.query(
      `SELECT * FROM notifications
       WHERE to_user_id IS NULL OR to_user_id = $1
       ORDER BY created_at DESC
       LIMIT 100`,
      [uid]
    );
    res.json({ ok: true, notifications: rows });
  } catch (err) {
    console.error("get /notifications:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™" });
  }
});

// üíª 3) ÿßŸÑŸÖÿ∑Ÿàÿ± Ÿäÿ¨ŸÑÿ® ŸÉŸÑ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿßÿ™ ŸÖÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
app.get("/api/admin/chat/users", auth, requireAdmin, async (_req, res) => {
  try {
    const { rows } = await pool.query(
      `SELECT DISTINCT u.id, u.name, u.email, u.avatar
       FROM users u
       JOIN system_chat s ON s.user_id = u.id
       ORDER BY u.name ASC`
    );
    res.json({ ok: true, users: rows });
  } catch (err) {
    console.error("admin/chat/users:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ" });
  }
});

// üìú 4) ÿßŸÑŸÖÿ∑Ÿàÿ± ŸäŸÅÿ™ÿ≠ ŸÖÿ≠ÿßÿØÿ´ÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ≠ÿØÿØ
app.get("/api/admin/chat/:user_id", auth, requireAdmin, async (req, res) => {
  try {
    const uid = +req.params.user_id;
    const { rows } = await pool.query(
      `SELECT * FROM system_chat WHERE user_id = $1 ORDER BY created_at ASC`,
      [uid]
    );
    res.json({ ok: true, messages: rows });
  } catch (err) {
    console.error("admin/chat/:user_id:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©" });
  }
});

// üì® 5) ÿßŸÑŸÖÿ∑Ÿàÿ± Ÿäÿ±ÿØ ÿπŸÑŸâ ŸÖÿ≥ÿ™ÿÆÿØŸÖ
app.post("/api/admin/chat/reply", auth, requireAdmin, async (req, res) => {
  try {
    const { to_user_id, message } = req.body;
    if (!to_user_id || !message?.trim())
      return res.status(400).json({ error: "ÿ®ŸäÿßŸÜÿßÿ™ ŸÜÿßŸÇÿµÿ©" });

    const createdAt = Date.now();
    await pool.query(
      `INSERT INTO system_chat (user_id, message, from_admin, created_at)
       VALUES ($1, $2, 1, $3)`,
      [+to_user_id, message.trim(), createdAt]
    );

    await notifyUser(
      +to_user_id,
      "üí¨ ÿ±ÿØ ŸÖŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ",
      message.trim(),
      "system",
      { chat_reply: true }
    );

    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿØ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ" });
  } catch (err) {
    console.error("admin/chat/reply:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿØ" });
  }
});

// ====== ÿ™ÿπŸÑŸäŸÖ ÿ¨ŸÖŸäÿπ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÉŸÖŸÇÿ±Ÿàÿ°ÿ© ======
app.post("/api/notifications/read_all", auth, async (req, res) => {
  try {
    const uid = req.user.id;
    const result = await pool.query(
      `UPDATE notifications SET is_read = 1 WHERE to_user_id = $1`,
      [uid]
    );
    res.json({
      ok: true,
      message: `‚úÖ ÿ™ŸÖ ÿ™ÿπŸÑŸäŸÖ ${result.rowCount} ÿ•ÿ¥ÿπÿßÿ± ŸÉŸÖŸÇÿ±Ÿàÿ°.`,
    });
  } catch (err) {
    console.error("notifications/read_all:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ™ÿ≠ÿØŸäÿ´ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™" });
  }
});

// ====== üß© ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿßŸÑÿ•ÿØÿßÿ±Ÿäÿ© (System Chat) ======

// üì® 1) ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿäÿ±ÿ≥ŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÑŸÑŸÖÿ∑Ÿàÿ±
app.post("/api/chat/send", auth, async (req, res) => {
  try {
    const { message } = req.body;
    const userId = req.user.id;
    const msg = (message || "").trim();

    if (!msg) return res.status(400).json({ error: "ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÅÿßÿ±ÿ∫ÿ©" });
    if (msg.length > 2000) return res.status(400).json({ error: "ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ∑ŸàŸäŸÑÿ© ÿ¨ÿØŸãÿß (ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ 2000 ÿ≠ÿ±ŸÅ)" });

    const createdAt = Date.now();
    await pool.query(
      `INSERT INTO system_chat (user_id, message, from_admin, created_at)
       VALUES ($1, $2, 0, $3)`,
      [userId, msg, createdAt]
    );

    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÑŸÑŸÖÿ∑Ÿàÿ±" });
  } catch (err) {
    console.error("chat/send:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©" });
  }
});

// üí¨ 2) ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿäÿ¨ŸÑÿ® ÿ≥ÿ¨ŸÑ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿßŸÑÿÆÿßÿµ ÿ®Ÿá
app.get("/api/chat/history", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { rows } = await pool.query(
      `SELECT * FROM system_chat WHERE user_id = $1 ORDER BY created_at ASC`,
      [userId]
    );
    res.json({ ok: true, messages: rows });
  } catch (err) {
    console.error("chat/history:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©" });
  }
});

// ====== üì¨ ÿ•ŸÜÿ¥ÿßÿ° ÿ•ÿ¥ÿπÿßÿ± ŸÖŸÜ Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ======
app.post("/api/notifications", auth, async (req, res) => {
  try {
    const { to_user_id, title, body, type = "system", meta = {} } = req.body;
    const senderId = req.user.id;
    if (!to_user_id || !body) {
      return res.status(400).json({ error: "ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ŸÜÿßŸÇÿµÿ©" });
    }
    await notifyUser(+to_user_id, title || "ÿ•ÿ¥ÿπÿßÿ± ÿ¨ÿØŸäÿØ", body, type, { ...meta, sender_id: senderId });
    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("post /notifications:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±" });
  }
});

// ====== ÿ¨ŸÑÿ® ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿßŸÑŸÖÿπÿ±ŸëŸÅ ======
app.get("/api/users/:id", async (req, res) => {
  try {
    const userId = parseInt(req.params.id);
    if (Number.isNaN(userId)) return res.json({ ok: false, error: "ÿ±ŸÇŸÖ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });

    const { rows } = await pool.query(
      `SELECT id, heq_id, name, email, bio, country, age, gender, avatar, show_email, faith_rank, flames, rank_tier
       FROM users WHERE id = $1`,
      [userId]
    );

    if (!rows.length) return res.json({ ok: false, error: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ." });

    const user = rows[0];
    if (!user.show_email) user.email = null;

    res.json({ ok: true, user });
  } catch (err) {
    console.error("get /users/:id:", err);
    res.json({ ok: false, error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});
// =========================================
// üîç ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿßŸÑÿßÿ≥ŸÖ ÿ£Ÿà HEQ-ID
// =========================================
app.get("/api/search", auth, async (req, res) => {
  try {
    const q = (req.query.query || "").trim();
    if (!q) return res.json({ ok: false, error: "ÿßŸÑŸÉŸÑŸÖÿ© ŸÅÿßÿ±ÿ∫ÿ©" });

    const likeQuery = `%${q}%`;
    const { rows } = await pool.query(
      `SELECT id, heq_id, name, avatar
       FROM users
       WHERE name ILIKE $1 OR heq_id ILIKE $2
       LIMIT 5`,
      [likeQuery, likeQuery]
    );

    if (!rows || rows.length === 0)
      return res.json({ ok: true, users: [] });

    const cleanUsers = rows.map(u => ({
      id: u.id,
      heq_id: u.heq_id,
      name: u.name || "ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿØŸàŸÜ ÿßÿ≥ŸÖ",
      avatar: u.avatar || "assets/default-avatar.png"
    }));

    return res.json({ ok: true, users: cleanUsers });
  } catch (err) {
    console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ®ÿ≠ÿ´:", err);
    res.status(500).json({ ok: false, error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});
// =======================================
// ü§ù ŸÜÿ∏ÿßŸÖ ÿßŸÑŸàÿµŸÑ ÿßŸÑÿ≠ŸÇŸäŸÇŸä ÿ®ŸäŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ (PostgreSQL)
// =======================================

// üîπ 1. ŸÅÿ≠ÿµ ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ© ÿ®ŸäŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
app.get("/api/connect/status/:targetId", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const targetId = +req.params.targetId;

    if (userId === targetId)
      return res.json({ status: "self", direction: "self" });

    const { rows } = await pool.query(
      `SELECT * FROM connections 
       WHERE (user_id=$1 AND target_id=$2) OR (user_id=$2 AND target_id=$1)
       LIMIT 1`,
      [userId, targetId]
    );

    if (!rows.length)
      return res.json({ status: "none", direction: "none" });

    const row = rows[0];
    let direction = "none";
    if (row.user_id === userId && row.target_id === targetId) direction = "outgoing";
    else if (row.user_id === targetId && row.target_id === userId) direction = "incoming";

    res.json({
      status: row.status,
      direction,
      requester_id: row.user_id,
      target_id: row.target_id
    });
  } catch (err) {
    console.error("connect/status:", err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

// üîπ 2. ÿ•ÿ±ÿ≥ÿßŸÑ ÿ∑ŸÑÿ® ŸàÿµŸÑ
app.post("/api/connect", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { target_id } = req.body;
    const targetId = +target_id;
    if (!targetId || userId === targetId)
      return res.status(400).json({ error: "ÿ∑ŸÑÿ® ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });

    const now = Date.now();

    await pool.query(
      `INSERT INTO connections (user_id, target_id, status, created_at, updated_at)
       VALUES ($1, $2, 'pending', $3, $3)
       ON CONFLICT (user_id, target_id) DO UPDATE SET 
         status='pending', updated_at=$3`,
      [userId, targetId, now]
    );

    await notifyUser(
      targetId,
      "üîó ÿ∑ŸÑÿ® ŸàÿµŸÑ ÿ¨ÿØŸäÿØ",
      "ŸÇÿßŸÖ ÿ£ÿ≠ÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿ•ÿ±ÿ≥ÿßŸÑ ÿ∑ŸÑÿ® ŸàÿµŸÑ ÿ•ŸÑŸäŸÉ.",
      "connect_request",
      { sender_id: userId }
    );

    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ∑ŸÑÿ® ÿßŸÑŸàÿµŸÑ ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("connect/send:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ®" });
  }
});

// üîπ 3. ŸÅŸÉ ÿßŸÑŸàÿµŸÑ ÿ£Ÿà ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ∑ŸÑÿ®
app.delete("/api/connect", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { target_id } = req.body;
    const targetId = +target_id;
    if (!targetId || userId === targetId)
      return res.status(400).json({ error: "ÿ∑ŸÑÿ® ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });

    await pool.query(
      `DELETE FROM connections 
       WHERE (user_id=$1 AND target_id=$2) OR (user_id=$2 AND target_id=$1)`,
      [userId, targetId]
    );

    res.json({ ok: true, message: "üíî ÿ™ŸÖ ŸÅŸÉ ÿßŸÑŸàÿµŸÑ ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("connect/delete:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ŸÅŸÉ ÿßŸÑŸàÿµŸÑ" });
  }
});

// =======================================
// ‚úÖ ŸÇÿ®ŸàŸÑ ÿ£Ÿà ÿ±ŸÅÿ∂ ÿ∑ŸÑÿ® ÿßŸÑŸàÿµŸÑ
// =======================================
app.post("/api/connect/respond", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { requester_id, action } = req.body;
    const now = Date.now();

    if (!requester_id || !["accept", "reject"].includes(action))
      return res.status(400).json({ error: "ÿ∑ŸÑÿ® ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });

    const { rows } = await pool.query(
      `SELECT * FROM connections WHERE user_id=$1 AND target_id=$2 AND status='pending'`,
      [requester_id, userId]
    );

    if (!rows.length)
      return res.status(404).json({ error: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿ∑ŸÑÿ®" });

    if (action === "accept") {
      await pool.query(
        `UPDATE connections SET status='connected', updated_at=$1 WHERE user_id=$2 AND target_id=$3`,
        [now, requester_id, userId]
      );

      await pool.query(
        `INSERT INTO connections (user_id, target_id, status, created_at, updated_at)
         VALUES ($1, $2, 'connected', $3, $3)
         ON CONFLICT (user_id, target_id) DO NOTHING`,
        [userId, requester_id, now]
      );

      await notifyUser(
        requester_id,
        "ü§ù ÿ™ŸÖ ŸÇÿ®ŸàŸÑ ÿ∑ŸÑÿ® ÿßŸÑŸàÿµŸÑ",
        "ŸÇÿßŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ŸÇÿ®ŸàŸÑ ÿ∑ŸÑÿ®ŸÉ ÿ®ÿßŸÑŸàÿµŸÑ!",
        "connect_accept",
        { sender_id: userId }
      );

      res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ŸÇÿ®ŸàŸÑ ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠" });
    } else {
      await pool.query(
        `DELETE FROM connections WHERE user_id=$1 AND target_id=$2 AND status='pending'`,
        [requester_id, userId]
      );

      await notifyUser(
        requester_id,
        "‚ùå ÿ™ŸÖ ÿ±ŸÅÿ∂ ÿ∑ŸÑÿ® ÿßŸÑŸàÿµŸÑ",
        "ŸÇÿßŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿ±ŸÅÿ∂ ÿ∑ŸÑÿ®ŸÉ ÿ®ÿßŸÑŸàÿµŸÑ.",
        "connect_reject",
        { sender_id: userId }
      );

      res.json({ ok: true, message: "‚ùå ÿ™ŸÖ ÿ±ŸÅÿ∂ ÿßŸÑÿ∑ŸÑÿ®" });
    }
  } catch (err) {
    console.error("connect/respond:", err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

// =======================================
// üî¢ ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸàÿµŸàŸÑŸäŸÜ + ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®ŸàŸÜÿµ ŸÑŸÑŸÖÿ∑Ÿàÿ±
// =======================================
const DEV_EMAIL = "hothaifaalsamri@gmail.com";

// üî∏ ÿØÿßŸÑÿ© ŸÑÿ¨ŸÑÿ® ÿßŸÑÿπÿØÿØ ÿßŸÑŸÉŸÑŸä ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
async function getTotalUsers() {
  const { rows } = await pool.query(`SELECT COUNT(*) AS total FROM users`);
  return +rows[0].total || 0;
}

// üî∏ 1. ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸàÿµŸàŸÑŸäŸÜ ŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ≠ÿØÿØ
app.get("/api/connect/count/:userId", auth, async (req, res) => {
  try {
    const targetId = +req.params.userId;
    if (!targetId)
      return res.status(400).json({ error: "ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠" });

    const { rows } = await pool.query(
      `SELECT COUNT(*) AS total FROM connections
       WHERE (user_id=$1 OR target_id=$1) AND status='connected'`,
      [targetId]
    );

    const connectedCount = +rows[0].total || 0;

    const { rows: userRow } = await pool.query(
      `SELECT email FROM users WHERE id=$1`,
      [targetId]
    );

    if (userRow.length && userRow[0].email === DEV_EMAIL) {
      const totalUsers = await getTotalUsers();
      const bonus = Math.max(0, totalUsers - 1) * 5;
      return res.json({
        ok: true,
        count: connectedCount,
        bonus,
        display_count: connectedCount + bonus
      });
    }

    res.json({ ok: true, count: connectedCount, bonus: 0, display_count: connectedCount });
  } catch (err) {
    console.error("connect/count:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸàÿµŸàŸÑŸäŸÜ" });
  }
});
// =======================================
// üî• ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ•ŸäŸÖÿßŸÜ (ÿßŸÑÿ¥ÿπŸÑÿßÿ™ ŸàÿßŸÑÿ¥ÿßÿ±ÿßÿ™) + ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®
// =======================================

// üî∏ 2. ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸàÿµŸàŸÑŸäŸÜ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ≠ÿßŸÑŸä
app.get("/api/connect/count/me", auth, async (req, res) => {
  try {
    const myId = req.user.id;
    const { rows } = await pool.query(
      `SELECT COUNT(*) AS total FROM connections
       WHERE (user_id=$1 OR target_id=$1) AND status='connected'`,
      [myId]
    );
    const connectedCount = +rows[0].total || 0;

    const { rows: urow } = await pool.query(
      `SELECT email FROM users WHERE id=$1`,
      [myId]
    );

    if (urow.length && urow[0].email === DEV_EMAIL) {
      const totalUsers = await getTotalUsers();
      const bonus = Math.max(0, totalUsers - 1) * 5;
      return res.json({
        ok: true,
        count: connectedCount,
        bonus,
        display_count: connectedCount + bonus,
      });
    }

    res.json({ ok: true, count: connectedCount, bonus: 0, display_count: connectedCount });
  } catch (err) {
    console.error("connect/count/me:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸàÿµŸàŸÑŸäŸÜ" });
  }
});

// üî• ÿ™ÿ≠ÿØŸäÿ´ ÿπÿØÿØ ÿßŸÑÿ¥ÿπŸÑÿßÿ™ ŸàÿßŸÑÿ¥ÿßÿ±ÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©
app.post("/api/faith/update", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { flames, faith_rank } = req.body || {};
    if (typeof flames === "undefined" && typeof faith_rank === "undefined")
      return res.status(400).json({ error: "ŸÑÿß ŸäŸàÿ¨ÿØ ÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑÿ™ÿ≠ÿØŸäÿ´" });

    await pool.query(
      `UPDATE users 
       SET flames = COALESCE($1, flames),
           faith_rank = COALESCE($2, faith_rank),
           last_faith_activity = EXTRACT(EPOCH FROM NOW())
       WHERE id=$3`,
      [flames, faith_rank, userId]
    );

    // üì® ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑÿ™ÿ±ŸÇŸäÿ©
    if (typeof faith_rank === "string" && faith_rank.trim()) {
      await notifyUser(
        userId,
        "üéñÔ∏è ÿ™ÿ±ŸÇŸäÿ© ÿ¥ÿßÿ±ÿ™ŸÉ",
        `üéâ ÿ™ŸÖÿ™ ÿ™ÿ±ŸÇŸäÿ™ŸÉ ÿ•ŸÑŸâ ${faith_rank}! ÿßÿ≥ÿ™ŸÖÿ± ŸÅŸä ŸÜÿ¥ÿ± ÿßŸÑÿÆŸäÿ± üî•`,
        "rank_upgrade",
        { sender_id: userId, faith_rank }
      );
    }

    // üíé ÿ™ÿ≠ÿØŸäÿØ ŸÜŸàÿπ ÿßŸÑÿ¥ÿßÿ±ÿ©
    let rankTier = null;
    const rankName = (faith_rank || "").toString();
    if (rankName.includes("ŸÖÿ≥ÿßŸáŸÖ")) rankTier = "silver";
    else if (rankName.includes("ŸÜÿßÿ¥ÿ±")) rankTier = "gold";
    else if (rankName.includes("ŸÑÿß Ÿäÿ™ÿ±ŸÉ")) rankTier = "diamond";

    if (rankTier) {
      await pool.query(
        `UPDATE users SET rank_tier=$1 WHERE id=$2`,
        [rankTier, userId]
      );
      console.log(`üèÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ rank_tier ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ${userId} ‚Üí ${rankTier}`);
    }

    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ¥ÿπŸÑÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("faith/update:", err);
    res.status(500).json({ error: "ÿÆÿ∑ÿ£ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

app.get("/api/faith/me", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { rows } = await pool.query(
      `SELECT flames, faith_rank FROM users WHERE id=$1`,
      [userId]
    );
    res.json({ ok: true, faith: rows[0] || { flames: 0, faith_rank: "" } });
  } catch (err) {
    console.error("faith/me:", err);
    res.status(500).json({ error: "ŸÅÿ¥ŸÑ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™" });
  }
});

app.post("/api/faith/check_reset", auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { rows } = await pool.query(
      `SELECT last_faith_activity, flames, faith_rank 
       FROM users WHERE id=$1`,
      [userId]
    );
    if (!rows.length) return res.json({ ok: false });

    const row = rows[0];
    const now = Math.floor(Date.now() / 1000);
    const diffDays = (now - (row.last_faith_activity || now)) / 86400;

    if (diffDays >= 3 && row.flames > 0) {
      await pool.query(
        `UPDATE users 
         SET flames=0, faith_rank='', last_faith_activity=EXTRACT(EPOCH FROM NOW()) 
         WHERE id=$1`,
        [userId]
      );

      await notifyUser(
        userId,
        "‚è≥ ÿßÿ≥ÿ™ÿ¶ŸÜÿßŸÅ ŸÜÿ¥ÿßÿ∑ŸÉ ÿßŸÑÿ•ŸäŸÖÿßŸÜŸä",
        "ÿ™ŸÖ ÿ™ÿµŸÅŸäÿ± ÿßŸÑÿ¥ÿπŸÑÿßÿ™ ÿ®ÿπÿØ ÿ∫Ÿäÿßÿ® 3 ÿ£ŸäÿßŸÖ. ŸÜŸàÿ±ÿ™ŸÜÿß! ÿßÿ®ÿØÿ£ ŸÖŸÜ ÿ¨ÿØŸäÿØ ü§ç",
        "faith_reset",
        { sender_id: userId }
      );

      return res.json({
        ok: true,
        reset: true,
        message: "üî• ÿ™ŸÖ ÿ™ÿµŸÅŸäÿ± ÿßŸÑÿ¥ÿπŸÑÿßÿ™ ÿ®ÿπÿØ ÿ∫Ÿäÿßÿ®ŸÉ 3 ÿ£ŸäÿßŸÖ",
      });
    }

    res.json({ ok: true, reset: false });
  } catch (err) {
    console.error("faith/check_reset:", err);
    res.status(500).json({ ok: false, error: "ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿµŸÅŸäÿ±" });
  }
});

// üõ∞Ô∏è ÿ•ÿ±ÿ¨ÿßÿπ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ•ŸäŸÖÿßŸÜ (ÿßŸÑÿ¥ÿπŸÑÿßÿ™ ŸàÿßŸÑÿ¥ÿßÿ±ÿ©)
app.get("/api/faith/status", auth, async (req, res) => {
  try {
    const { rows } = await pool.query(
      `SELECT flames AS total_flames, faith_rank AS rank 
       FROM users WHERE id=$1`,
      [req.user.id]
    );
    if (!rows.length)
      return res.json({ ok: false, error: "User not found" });
    res.json({ ok: true, status: rows[0] });
  } catch (err) {
    console.error("faith/status:", err);
    res.json({ ok: false, error: "Server error" });
  }
});

// ‚úÖ ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±
app.post("/api/change_password", auth, async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;
    const userId = req.user.id;

    if (!oldPassword || !newPassword)
      return res.status(400).json({ ok: false, error: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ" });

    const { rows } = await pool.query(`SELECT password FROM users WHERE id=$1`, [userId]);
    if (!rows.length) return res.status(404).json({ ok: false, error: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const bcrypt = require("bcryptjs");
    const match = await bcrypt.compare(oldPassword, rows[0].password);
    if (!match)
      return res.json({ ok: false, error: "‚ùå ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸÑŸÇÿØŸäŸÖÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©" });

    const hashed = await bcrypt.hash(newPassword, 10);
    await pool.query(`UPDATE users SET password=$1 WHERE id=$2`, [hashed, userId]);
    res.json({ ok: true, message: "‚úÖ ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠" });
  } catch (err) {
    console.error("change_password:", err);
    res.status(500).json({ ok: false, error: "ŸÅÿ¥ŸÑ ÿ™ÿ≠ÿØŸäÿ´ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±" });
  }
});

// üóëÔ∏è ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ÿßŸÑŸÉÿßŸÖŸÑ
app.post("/api/delete_account", auth, async (req, res) => {
  try {
    const { password } = req.body;
    const userId = req.user.id;
    if (!password)
      return res.status(400).json({ ok: false, error: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±" });

    const { rows } = await pool.query(`SELECT password FROM users WHERE id=$1`, [userId]);
    if (!rows.length)
      return res.status(404).json({ ok: false, error: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ" });

    const bcrypt = require("bcryptjs");
    const match = await bcrypt.compare(password, rows[0].password);
    if (!match)
      return res.json({ ok: false, error: "‚ùå ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©!" });

    const tablesToClean = ["posts", "comments", "connections", "notifications", "reactions", "saved_posts", "reports"];
    for (const table of tablesToClean) {
      await pool.query(`DELETE FROM ${table} WHERE user_id=$1`, [userId]);
    }
    await pool.query(`DELETE FROM users WHERE id=$1`, [userId]);

    console.log(`üóëÔ∏è ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ${userId} Ÿàÿ¨ŸÖŸäÿπ ÿ®ŸäÿßŸÜÿßÿ™Ÿá`);
    res.json({ ok: true });
  } catch (err) {
    console.error("delete_account:", err);
    res.status(500).json({ ok: false, error: "ŸÅÿ¥ŸÑ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®" });
  }
});
// ============================================
// ‚úâÔ∏è ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿπÿ®ÿ± Brevo (SendinBlue ÿ≥ÿßÿ®ŸÇÿßŸã)
// ============================================

const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

async function sendEmailBrevo(to, subject, html) {
  try {
    const res = await fetch("https://api.brevo.com/v3/smtp/email", {
      method: "POST",
      headers: {
        accept: "application/json",
        "api-key": process.env.BREVO_API_KEY,
        "content-type": "application/json",
      },
      body: JSON.stringify({
        sender: { name: "HEQ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ", email: "no-reply@heqcommunity.com" },
        to: [{ email: to }],
        subject,
        htmlContent: html,
      }),
    });

    const data = await res.json();
    if (res.ok) {
      console.log(`üì© ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿ•ŸÑŸâ ${to}`);
    } else {
      console.error("‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ:", data);
    }
  } catch (err) {
    console.error("üö´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÄ Brevo:", err);
  }
}

// =======================================
// üß† Health check + ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
// =======================================
app.get("/", (_, res) => {
  res.json({ ok: true, message: "üöÄ HEQ server is running smoothly!" });
});

app.listen(PORT, () => {
  console.log(`‚úÖ Server running on port ${PORT}`);
});


